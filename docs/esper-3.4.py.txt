class Processor:
    """Base class for all systems. Must implement `process(self)` method."""

    def process(self) -> None:
        """Called by esper.process() for each registered processor.

        Typical usage involves iterating over entities with specific
        components:

            for ent, (rend, vel) in esper.get_components(Renderable, Velocity):
                ...

        This method should contain core logic for processing components.
        """

# Component Examples

class Velocity:
    """A sample component representing movement vector and constraints."""

    def __init__(self, x=0.0, y=0.0, accel=0.1, decel=0.75, maximum=3):
        """
        Args:
            x: Initial x velocity.
            y: Initial y velocity.
            accel: Acceleration factor.
            decel: Deceleration factor.
            maximum: Maximum speed.
        """
        self.vector = Vec2(x, y)
        self.accel = accel
        self.decel = decel
        self.maximum = maximum

@dataclass
class Camera:
    """Represents a camera's current offset in a 2D space."""
    current_x_offset: float = 0
    current_y_offset: float = 0

Interaction = namedtuple("Interaction", "interaction_type target_name")

# World Context Management

def switch_world(name: str) -> None:
    """Activate a named World. Creates it if not exists."""

def delete_world(name: str) -> None:
    """Delete a named World. Raises PermissionError if active."""

def list_worlds() -> list[str]:
    """Returns all available World names."""

# Entity API

def create_entity(*components) -> int:
    """Create a new entity with optional components."""

def delete_entity(entity: int, immediate: bool = False) -> None:
    """Delete an entity and its components. Can defer or perform immediate deletion."""

def entity_exists(entity: int) -> bool:
    """Check if entity exists and is alive."""

# Component API

def add_component(entity: int, component_instance, type_alias: type = None) -> None:
    """Add or replace a component. Optionally use type alias for queries."""

def remove_component(entity: int, component_type: type) -> Component:
    """Remove a component by type. Returns removed component."""

def component_for_entity(entity: int, component_type: type) -> Component:
    """Get a specific component instance for an entity."""

def components_for_entity(entity: int) -> tuple:
    """Return all component instances for an entity."""

def has_component(entity: int, component_type: type) -> bool:
    """Check if entity has a specific component."""

def has_components(entity: int, *component_types: type) -> bool:
    """Check if entity has all listed component types."""

def try_component(entity: int, component_type: type) -> Component | None:
    """Try to retrieve a component. Returns None if not present."""

def try_components(entity: int, *types: type) -> tuple | None:
    """Try to retrieve multiple components. Returns tuple or None."""

# Processor API

def add_processor(processor_instance, priority: int = 0) -> None:
    """Register a processor instance. Higher priority runs earlier."""

def remove_processor(processor_type: type) -> None:
    """Remove a processor by its class type."""

def get_processor(processor_type: type) -> Processor | None:
    """Get a processor instance by type."""

def process(*args, **kwargs) -> None:
    """Run `process()` on all processors in priority order."""

def timed_process(*args, **kwargs) -> None:
    """Same as process(), but records execution time in `process_times`."""

# Query API

def get_component(component_type: type) -> list[tuple[int, Component]]:
    """Get all (entity, component) pairs for a type."""

def get_components(*component_types: type) -> list[tuple[int, tuple]]:
    """Get all (entity, (components...)) for matching sets."""

# Utility Functions

def clear_database() -> None:
    """Remove all entities and components from current World."""

def clear_cache() -> None:
    """Clear internal component lookup cache."""

def clear_dead_entities() -> None:
    """Finalize deletion of dead entities."""

# Events

def dispatch_event(name: str, *args) -> None:
    """Dispatch an event with arguments to all registered handlers."""

def set_handler(name: str, func: Callable) -> None:
    """Register a handler for an event name."""

def remove_handler(name: str, func: Callable) -> None:
    """Remove a handler for an event name."""
